{"version":3,"file":"applicationinsights-core-js.min.js","sources":["../dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js","../dist-esm/JavaScriptSDK/CoreUtils.js","../dist-esm/JavaScriptSDK/ChannelController.js","../dist-esm/JavaScriptSDK/BaseCore.js","../dist-esm/JavaScriptSDK.Enums/LoggingEnums.js","../dist-esm/JavaScriptSDK/NotificationManager.js","../dist-esm/JavaScriptSDK/DiagnosticLogger.js","../dist-esm/JavaScriptSDK/AppInsightsCore.js","../dist-esm/JavaScriptSDK.Interfaces/IChannelControls.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.\r\n */\r\nexport var EventsDiscardedReason = {\r\n    /**\r\n     * Unknown.\r\n     */\r\n    Unknown: 0,\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    NonRetryableStatus: 1,\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    InvalidEvent: 2,\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    SizeLimitExceeded: 3,\r\n    /**\r\n     * The server is not accepting events from this instrumentation key.\r\n     */\r\n    KillSwitch: 4,\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    QueueFull: 5,\r\n};\r\n//# sourceMappingURL=EventsDiscardedReason.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar CoreUtils = /** @class */ (function () {\r\n    function CoreUtils() {\r\n    }\r\n    CoreUtils.isNullOrUndefined = function (input) {\r\n        return input === null || input === undefined;\r\n    };\r\n    /**\r\n     * Creates a new GUID.\r\n     * @return {string} A GUID.\r\n     */\r\n    CoreUtils.disableCookies = function () {\r\n        CoreUtils._canUseCookies = false;\r\n    };\r\n    CoreUtils.newGuid = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n            var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return CoreUtils;\r\n}());\r\nexport { CoreUtils };\r\nvar GuidRegex = /[xy]/g;\r\n//# sourceMappingURL=CoreUtils.js.map","import { CoreUtils } from \"./CoreUtils\";\r\n\"use strict\";\r\nvar ChannelControllerPriority = 500;\r\nvar ChannelValidationMessage = \"Channel has invalid priority\";\r\nvar ChannelController = /** @class */ (function () {\r\n    function ChannelController() {\r\n        this.identifier = \"ChannelControllerPlugin\";\r\n        this.priority = ChannelControllerPriority; // in reserved range 100 to 200\r\n    }\r\n    ChannelController.prototype.processTelemetry = function (item) {\r\n        this.channelQueue.forEach(function (queues) {\r\n            // pass on to first item in queue\r\n            if (queues.length > 0) {\r\n                queues[0].processTelemetry(item);\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(ChannelController.prototype, \"ChannelControls\", {\r\n        get: function () {\r\n            return this.channelQueue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ChannelController.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        if (config.isCookieUseDisabled) {\r\n            CoreUtils.disableCookies();\r\n        }\r\n        this.channelQueue = new Array();\r\n        if (config.channels) {\r\n            var invalidChannelIdentifier_1;\r\n            config.channels.forEach(function (queue) {\r\n                if (queue && queue.length > 0) {\r\n                    queue = queue.sort(function (a, b) {\r\n                        return a.priority - b.priority;\r\n                    });\r\n                    for (var i = 1; i < queue.length; i++) {\r\n                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain\r\n                    }\r\n                    // Initialize each plugin\r\n                    queue.forEach(function (queueItem) {\r\n                        if (queueItem.priority < ChannelControllerPriority) {\r\n                            invalidChannelIdentifier_1 = queueItem.identifier;\r\n                        }\r\n                        queueItem.initialize(config, core, extensions);\r\n                    });\r\n                    if (invalidChannelIdentifier_1) {\r\n                        throw Error(ChannelValidationMessage + invalidChannelIdentifier_1);\r\n                    }\r\n                    _this.channelQueue.push(queue);\r\n                }\r\n            });\r\n        }\r\n        var arr = new Array();\r\n        for (var i = 0; i < extensions.length; i++) {\r\n            var plugin = extensions[i];\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                arr.push(plugin);\r\n            }\r\n        }\r\n        if (arr.length > 0) {\r\n            // sort if not sorted\r\n            arr = arr.sort(function (a, b) {\r\n                return a.priority - b.priority;\r\n            });\r\n            // setup next plugin\r\n            for (var i = 1; i < arr.length; i++) {\r\n                arr[i - 1].setNextPlugin(arr[i]);\r\n            }\r\n            // Initialize each plugin\r\n            arr.forEach(function (queueItem) { return queueItem.initialize(config, core, extensions); });\r\n            this.channelQueue.push(arr);\r\n        }\r\n    };\r\n    return ChannelController;\r\n}());\r\nexport { ChannelController };\r\n//# sourceMappingURL=ChannelController.js.map","import { CoreUtils } from \"./CoreUtils\";\r\nimport { ChannelController } from './ChannelController';\r\n\"use strict\";\r\nvar validationError = \"Extensions must provide callback to initialize\";\r\nvar BaseCore = /** @class */ (function () {\r\n    function BaseCore() {\r\n        this._isInitialized = false;\r\n        this._extensions = new Array();\r\n        this._channelController = new ChannelController();\r\n    }\r\n    BaseCore.prototype.initialize = function (config, extensions, logger, notificationManager) {\r\n        var _this = this;\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n        this.config = config;\r\n        this._notificationManager = notificationManager;\r\n        if (!this._notificationManager) {\r\n            this._notificationManager = Object.create({\r\n                addNotificationListener: function (listener) { },\r\n                removeNotificationListener: function (listener) { },\r\n                eventsSent: function (events) { },\r\n                eventsDiscarded: function (events, reason) { }\r\n            });\r\n        }\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        if (this._notificationManager) {\r\n            this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n        }\r\n        this.logger = logger;\r\n        if (!this.logger) {\r\n            this.logger = Object.create({\r\n                throwInternal: function (severity, msgId, msg, properties, isUserAct) {\r\n                    if (isUserAct === void 0) { isUserAct = false; }\r\n                },\r\n                warnToConsole: function (message) { },\r\n                resetInternalMessageCount: function () { }\r\n            });\r\n        }\r\n        // Concat all available extensions \r\n        (_a = this._extensions).push.apply(_a, extensions.concat(this.config.extensions));\r\n        // Initial validation \r\n        this._extensions.forEach(function (extension) {\r\n            var isValid = true;\r\n            if (CoreUtils.isNullOrUndefined(extension) || CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                isValid = false;\r\n            }\r\n            if (!isValid) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n        // Initial validation complete\r\n        this._extensions.push(this._channelController);\r\n        // Sort by priority\r\n        this._extensions = this._extensions.sort(function (a, b) {\r\n            var extA = a;\r\n            var extB = b;\r\n            var typeExtA = typeof extA.processTelemetry;\r\n            var typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        var priority = {};\r\n        this._extensions.forEach(function (ext) {\r\n            var t = ext;\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    if (_this.logger) {\r\n                        _this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                    }\r\n                }\r\n                else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n        var c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (var idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            var curr = (this._extensions[idx]);\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n            if (curr.priority === this._channelController.priority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n            this._extensions[idx].setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(function (ext) {\r\n            var e = ext;\r\n            if (e && e.priority < _this._channelController.priority) {\r\n                ext.initialize(_this.config, _this, _this._extensions); // initialize\r\n            }\r\n        });\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n        var _a;\r\n    };\r\n    BaseCore.prototype.getTransmissionControls = function () {\r\n        return this._channelController.ChannelControls;\r\n    };\r\n    BaseCore.prototype.track = function (telemetryItem) {\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        if (this._extensions.length === 0) {\r\n            this._channelController.processTelemetry(telemetryItem); // Pass to Channel controller so data is sent to correct channel queues\r\n        }\r\n        var i = 0;\r\n        while (i < this._extensions.length) {\r\n            if (this._extensions[i].processTelemetry) {\r\n                this._extensions[i].processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    };\r\n    return BaseCore;\r\n}());\r\nexport { BaseCore };\r\n//# sourceMappingURL=BaseCore.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var LoggingSeverity;\r\n(function (LoggingSeverity) {\r\n    /**\r\n     * Error will be sent as internal telemetry\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"CRITICAL\"] = 1] = \"CRITICAL\";\r\n    /**\r\n     * Error will NOT be sent as internal telemetry, and will only be shown in browser console\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"WARNING\"] = 2] = \"WARNING\";\r\n})(LoggingSeverity || (LoggingSeverity = {}));\r\n/**\r\n * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n */\r\nexport var _InternalMessageId = {\r\n    // Non user actionable\r\n    BrowserDoesNotSupportLocalStorage: 0,\r\n    BrowserCannotReadLocalStorage: 1,\r\n    BrowserCannotReadSessionStorage: 2,\r\n    BrowserCannotWriteLocalStorage: 3,\r\n    BrowserCannotWriteSessionStorage: 4,\r\n    BrowserFailedRemovalFromLocalStorage: 5,\r\n    BrowserFailedRemovalFromSessionStorage: 6,\r\n    CannotSendEmptyTelemetry: 7,\r\n    ClientPerformanceMathError: 8,\r\n    ErrorParsingAISessionCookie: 9,\r\n    ErrorPVCalc: 10,\r\n    ExceptionWhileLoggingError: 11,\r\n    FailedAddingTelemetryToBuffer: 12,\r\n    FailedMonitorAjaxAbort: 13,\r\n    FailedMonitorAjaxDur: 14,\r\n    FailedMonitorAjaxOpen: 15,\r\n    FailedMonitorAjaxRSC: 16,\r\n    FailedMonitorAjaxSend: 17,\r\n    FailedMonitorAjaxGetCorrelationHeader: 18,\r\n    FailedToAddHandlerForOnBeforeUnload: 19,\r\n    FailedToSendQueuedTelemetry: 20,\r\n    FailedToReportDataLoss: 21,\r\n    FlushFailed: 22,\r\n    MessageLimitPerPVExceeded: 23,\r\n    MissingRequiredFieldSpecification: 24,\r\n    NavigationTimingNotSupported: 25,\r\n    OnError: 26,\r\n    SessionRenewalDateIsZero: 27,\r\n    SenderNotInitialized: 28,\r\n    StartTrackEventFailed: 29,\r\n    StopTrackEventFailed: 30,\r\n    StartTrackFailed: 31,\r\n    StopTrackFailed: 32,\r\n    TelemetrySampledAndNotSent: 33,\r\n    TrackEventFailed: 34,\r\n    TrackExceptionFailed: 35,\r\n    TrackMetricFailed: 36,\r\n    TrackPVFailed: 37,\r\n    TrackPVFailedCalc: 38,\r\n    TrackTraceFailed: 39,\r\n    TransmissionFailed: 40,\r\n    FailedToSetStorageBuffer: 41,\r\n    FailedToRestoreStorageBuffer: 42,\r\n    InvalidBackendResponse: 43,\r\n    FailedToFixDepricatedValues: 44,\r\n    InvalidDurationValue: 45,\r\n    TelemetryEnvelopeInvalid: 46,\r\n    CreateEnvelopeError: 47,\r\n    // User actionable\r\n    CannotSerializeObject: 48,\r\n    CannotSerializeObjectNonSerializable: 49,\r\n    CircularReferenceDetected: 50,\r\n    ClearAuthContextFailed: 51,\r\n    ExceptionTruncated: 52,\r\n    IllegalCharsInName: 53,\r\n    ItemNotInArray: 54,\r\n    MaxAjaxPerPVExceeded: 55,\r\n    MessageTruncated: 56,\r\n    NameTooLong: 57,\r\n    SampleRateOutOfRange: 58,\r\n    SetAuthContextFailed: 59,\r\n    SetAuthContextFailedAccountName: 60,\r\n    StringValueTooLong: 61,\r\n    StartCalledMoreThanOnce: 62,\r\n    StopCalledWithoutStart: 63,\r\n    TelemetryInitializerFailed: 64,\r\n    TrackArgumentsNotSpecified: 65,\r\n    UrlTooLong: 66,\r\n    SessionStorageBufferFull: 67,\r\n    CannotAccessCookie: 68,\r\n    IdTooLong: 69,\r\n    InvalidEvent: 70,\r\n    FailedMonitorAjaxSetRequestHeader: 71,\r\n    SendBrowserInfoOnUserInit: 72\r\n};\r\n//# sourceMappingURL=LoggingEnums.js.map","/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar NotificationManager = /** @class */ (function () {\r\n    function NotificationManager() {\r\n        this.listeners = [];\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    NotificationManager.prototype.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    NotificationManager.prototype.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    NotificationManager.prototype.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    NotificationManager.prototype.eventsDiscarded = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDiscarded) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDiscarded(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    return NotificationManager;\r\n}());\r\nexport { NotificationManager };\r\n//# sourceMappingURL=NotificationManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        this.messageId = msgId;\r\n        this.message =\r\n            (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var diagnosticText = (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n        this.message += diagnosticText;\r\n    }\r\n    _InternalLogMessage.sanitizeDiagnosticText = function (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    };\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    /**\r\n     * For user non actionable traces use AI Internal prefix.\r\n     */\r\n    _InternalLogMessage.AiNonUserActionablePrefix = \"AI (Internal): \";\r\n    /**\r\n     * Prefix of the traces in portal.\r\n     */\r\n    _InternalLogMessage.AiUserActionablePrefix = \"AI: \";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         *  Session storage key for the prefix for the key indicating message type already logged\r\n         */\r\n        this.AIInternalMessagePrefix = \"AITR_\";\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        this._messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        this._messageLogged = {};\r\n        /**\r\n         * When this is true the SDK will throw exceptions to aid in debugging.\r\n         */\r\n        this.enableDebugExceptions = function () { return false; };\r\n        /**\r\n         * 0: OFF (default)\r\n         * 1: CRITICAL\r\n         * 2: >= WARNING\r\n         */\r\n        this.consoleLoggingLevel = function () { return 0; };\r\n        /**\r\n         * 0: OFF\r\n         * 1: CRITICAL (default)\r\n         * 2: >= WARNING\r\n         */\r\n        this.telemetryLoggingLevel = function () { return 1; };\r\n        /**\r\n         * The maximum number of internal messages allowed to be sent per page view\r\n         */\r\n        this.maxInternalMessageLimit = function () { return 25; };\r\n        if (CoreUtils.isNullOrUndefined(config)) {\r\n            // TODO: Use default config\r\n            // config = AppInsightsCore.defaultConfig;\r\n            // For now, use defaults specified in DiagnosticLogger members;\r\n            return;\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelConsole)) {\r\n            this.consoleLoggingLevel = function () { return config.loggingLevelConsole; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelTelemetry)) {\r\n            this.telemetryLoggingLevel = function () { return config.loggingLevelTelemetry; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.maxMessageLimit)) {\r\n            this.maxInternalMessageLimit = function () { return config.maxMessageLimit; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.enableDebugExceptions)) {\r\n            this.enableDebugExceptions = function () { return config.enableDebugExceptions; };\r\n        }\r\n    }\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n        if (this.enableDebugExceptions()) {\r\n            throw message;\r\n        }\r\n        else {\r\n            if (typeof (message) !== \"undefined\" && !!message) {\r\n                if (typeof (message.message) !== \"undefined\") {\r\n                    if (isUserAct) {\r\n                        // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                        var messageKey = +message.messageId;\r\n                        if (!this._messageLogged[messageKey] || this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                            this._messageLogged[messageKey] = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                        if (this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                        }\r\n                    }\r\n                    this.logInternalMessage(severity, message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        if (typeof console !== \"undefined\" && !!console) {\r\n            if (typeof console.warn === \"function\") {\r\n                console.warn(message);\r\n            }\r\n            else if (typeof console.log === \"function\") {\r\n                console.log(message);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        this._messageCount = 0;\r\n        this._messageLogged = {};\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        if (this._areInternalMessagesThrottled()) {\r\n            return;\r\n        }\r\n        // check if this message type was already logged for this session and if so, don't log it again\r\n        var logMessage = true;\r\n        var messageKey = this.AIInternalMessagePrefix + message.messageId;\r\n        // if the session storage is not available, limit to only one message type per page view\r\n        if (this._messageLogged[messageKey]) {\r\n            logMessage = false;\r\n        }\r\n        else {\r\n            this._messageLogged[messageKey] = true;\r\n        }\r\n        if (logMessage) {\r\n            // Push the event in the internal queue\r\n            if (severity <= this.telemetryLoggingLevel()) {\r\n                this.queue.push(message);\r\n                this._messageCount++;\r\n            }\r\n            // When throttle limit reached, send a special event\r\n            if (this._messageCount === this.maxInternalMessageLimit()) {\r\n                var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n                this.queue.push(throttleMessage);\r\n                this.warnToConsole(throttleLimitMessage);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Indicates whether the internal events are throttled\r\n     */\r\n    DiagnosticLogger.prototype._areInternalMessagesThrottled = function () {\r\n        return this._messageCount >= this.maxInternalMessageLimit();\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\n//# sourceMappingURL=DiagnosticLogger.js.map","import { BaseCore } from './BaseCore';\r\nimport { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\n\"use strict\";\r\nvar AppInsightsCore = /** @class */ (function () {\r\n    function AppInsightsCore() {\r\n        this.baseCore = new BaseCore();\r\n    }\r\n    AppInsightsCore.prototype.initialize = function (config, extensions) {\r\n        this._notificationManager = new NotificationManager();\r\n        this.logger = new DiagnosticLogger(config);\r\n        this.config = config;\r\n        this.baseCore.initialize(config, extensions, this.logger, this._notificationManager);\r\n    };\r\n    AppInsightsCore.prototype.getTransmissionControls = function () {\r\n        return this.baseCore.getTransmissionControls();\r\n    };\r\n    AppInsightsCore.prototype.track = function (telemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelemetryItem(telemetryItem);\r\n        this.baseCore.track(telemetryItem);\r\n    };\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    AppInsightsCore.prototype.addNotificationListener = function (listener) {\r\n        if (this._notificationManager) {\r\n            this._notificationManager.addNotificationListener(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    AppInsightsCore.prototype.removeNotificationListener = function (listener) {\r\n        if (this._notificationManager) {\r\n            this._notificationManager.removeNotificationListener(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    AppInsightsCore.prototype.pollInternalLogs = function (eventName) {\r\n        var _this = this;\r\n        var interval = this.baseCore.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n        return setInterval(function () {\r\n            var queue = _this.logger ? _this.logger.queue : [];\r\n            queue.forEach(function (logMessage) {\r\n                var item = {\r\n                    name: eventName ? eventName : \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: _this.baseCore.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n                _this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval);\r\n    };\r\n    AppInsightsCore.prototype._validateTelemetryItem = function (telemetryItem) {\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._notifyInvalidEvent = function (telemetryItem) {\r\n        if (this._notificationManager) {\r\n            this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n        }\r\n    };\r\n    return AppInsightsCore;\r\n}());\r\nexport { AppInsightsCore };\r\n//# sourceMappingURL=AppInsightsCore.js.map","\"use strict\";\r\nexport var MinChannelPriorty = 100;\r\n//# sourceMappingURL=IChannelControls.js.map"],"names":["EventsDiscardedReason","Unknown","NonRetryableStatus","InvalidEvent","SizeLimitExceeded","KillSwitch","QueueFull","CoreUtils","isNullOrUndefined","input","disableCookies","_canUseCookies","newGuid","replace","GuidRegex","c","r","Math","random","toString","ChannelController","prototype","processTelemetry","item","this","channelQueue","forEach","queues","length","Object","defineProperty","get","enumerable","configurable","initialize","config","core","extensions","invalidChannelIdentifier_1","_this","isCookieUseDisabled","Array","channels","queue","sort","a","b","priority","i","setNextPlugin","queueItem","identifier","Error","push","arr","plugin","BaseCore","logger","notificationManager","_isInitialized","instrumentationKey","_notificationManager","create","addNotificationListener","listener","removeNotificationListener","eventsSent","events","eventsDiscarded","reason","extensionConfig","NotificationManager","throwInternal","severity","msgId","msg","properties","isUserAct","warnToConsole","message","resetInternalMessageCount","_a","_extensions","apply","concat","extension","isValid","_channelController","extA","extB","typeExtA","typeExtB","ext","t","idx","curr","splice","getTransmissionControls","ChannelControls","track","telemetryItem","iKey","time","Date","toISOString","ver","LoggingSeverity","listeners","index","indexOf","_loop_1","this_1","setTimeout","_loop_2","this_2","_InternalMessageId","BrowserDoesNotSupportLocalStorage","BrowserCannotReadLocalStorage","BrowserCannotReadSessionStorage","BrowserCannotWriteLocalStorage","BrowserCannotWriteSessionStorage","BrowserFailedRemovalFromLocalStorage","BrowserFailedRemovalFromSessionStorage","CannotSendEmptyTelemetry","ClientPerformanceMathError","ErrorParsingAISessionCookie","ErrorPVCalc","ExceptionWhileLoggingError","FailedAddingTelemetryToBuffer","FailedMonitorAjaxAbort","FailedMonitorAjaxDur","FailedMonitorAjaxOpen","FailedMonitorAjaxRSC","FailedMonitorAjaxSend","FailedMonitorAjaxGetCorrelationHeader","FailedToAddHandlerForOnBeforeUnload","FailedToSendQueuedTelemetry","FailedToReportDataLoss","FlushFailed","MessageLimitPerPVExceeded","MissingRequiredFieldSpecification","NavigationTimingNotSupported","OnError","SessionRenewalDateIsZero","SenderNotInitialized","StartTrackEventFailed","StopTrackEventFailed","StartTrackFailed","StopTrackFailed","TelemetrySampledAndNotSent","TrackEventFailed","TrackExceptionFailed","TrackMetricFailed","TrackPVFailed","TrackPVFailedCalc","TrackTraceFailed","TransmissionFailed","FailedToSetStorageBuffer","FailedToRestoreStorageBuffer","InvalidBackendResponse","FailedToFixDepricatedValues","InvalidDurationValue","TelemetryEnvelopeInvalid","CreateEnvelopeError","CannotSerializeObject","CannotSerializeObjectNonSerializable","CircularReferenceDetected","ClearAuthContextFailed","ExceptionTruncated","IllegalCharsInName","ItemNotInArray","MaxAjaxPerPVExceeded","MessageTruncated","NameTooLong","SampleRateOutOfRange","SetAuthContextFailed","SetAuthContextFailedAccountName","StringValueTooLong","StartCalledMoreThanOnce","StopCalledWithoutStart","TelemetryInitializerFailed","TrackArgumentsNotSpecified","UrlTooLong","SessionStorageBufferFull","CannotAccessCookie","IdTooLong","FailedMonitorAjaxSetRequestHeader","SendBrowserInfoOnUserInit","_InternalLogMessage","sanitizeDiagnosticText","text","dataType","AiNonUserActionablePrefix","AiUserActionablePrefix","messageId","diagnosticText","JSON","stringify","DiagnosticLogger","enableDebugExceptions","messageKey","_messageLogged","consoleLoggingLevel","WARNING","logInternalMessage","console","warn","log","_messageCount","_areInternalMessagesThrottled","logMessage","AIInternalMessagePrefix","telemetryLoggingLevel","maxInternalMessageLimit","throttleLimitMessage","throttleMessage","loggingLevelConsole","loggingLevelTelemetry","maxMessageLimit","AppInsightsCore","baseCore","_notifyInvalidEvent","_validateTelemetryItem","pollInternalLogs","eventName","interval","diagnosticLogInterval","setInterval","name","baseType","baseData"],"mappings":"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"}