{"version":3,"file":"BaseCore.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/BaseCore.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IPlugin, ITelemetryPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { INotificationManager } from '../JavaScriptSDK.Interfaces/INotificationManager';\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { ChannelController } from './ChannelController';\r\n\r\n\"use strict\";\r\n\r\nconst validationError = \"Extensions must provide callback to initialize\";\r\n\r\nexport class BaseCore implements IAppInsightsCore {\r\n\r\n    public static defaultConfig: IConfiguration;\r\n    public config: IConfiguration;\r\n    public logger: IDiagnosticLogger;\r\n\r\n    public _extensions: IPlugin[];\r\n    protected _notificationManager: INotificationManager;\r\n    private _isInitialized: boolean = false;\r\n    private _channelController: ChannelController;\r\n\r\n    constructor() {\r\n        this._extensions = new Array<IPlugin>();\r\n        this._channelController = new ChannelController();\r\n    }\r\n\r\n    initialize(config: IConfiguration, extensions: IPlugin[], logger?: IDiagnosticLogger, notificationManager?: INotificationManager): void {\r\n\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n\r\n        this.config = config;\r\n\r\n        this._notificationManager = notificationManager;\r\n        if (!this._notificationManager) {\r\n            this._notificationManager = Object.create({\r\n                addNotificationListener: (listener) => {},\r\n                removeNotificationListener: (listener) => {},\r\n                eventsSent: (events) => {},\r\n                eventsDiscarded: (events: ITelemetryItem[], reason: number) => {}\r\n            })\r\n        }\r\n\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        if (this._notificationManager) {\r\n            this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n        }\r\n\r\n        this.logger = logger;\r\n        if (!this.logger) {\r\n            this.logger = Object.create({\r\n                throwInternal: (severity, msgId, msg: string, properties?: Object, isUserAct = false) => {},\r\n                warnToConsole: (message: string) => {},\r\n                resetInternalMessageCount: () => {}\r\n            })\r\n        }\r\n\r\n        // Concat all available extensions \r\n        this._extensions.push(...extensions, ...this.config.extensions);\r\n\r\n        // Initial validation \r\n        this._extensions.forEach((extension: ITelemetryPlugin) => {\r\n            let isValid = true;\r\n            if (CoreUtils.isNullOrUndefined(extension) || CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                isValid = false;\r\n            }\r\n            if (!isValid) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n\r\n        // Initial validation complete\r\n\r\n        this._extensions.push(this._channelController);\r\n        // Sort by priority\r\n        this._extensions = this._extensions.sort((a, b) => {\r\n            const extA = (a as ITelemetryPlugin);\r\n            const extB = (b as ITelemetryPlugin);\r\n            const typeExtA = typeof extA.processTelemetry;\r\n            const typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        const priority = {};\r\n        this._extensions.forEach(ext => {\r\n            const t = (ext as ITelemetryPlugin);\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    if (this.logger) {\r\n                        this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                    }\r\n                } else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n\r\n        let c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (let idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            const curr = (this._extensions[idx]) as ITelemetryPlugin;\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n\r\n            if (curr.priority === this._channelController.priority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n\r\n            (this._extensions[idx] as any).setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(ext => {\r\n            const e = ext as ITelemetryPlugin;\r\n            if (e && e.priority < this._channelController.priority) {\r\n                ext.initialize(this.config, this, this._extensions); // initialize\r\n            }\r\n        });\r\n\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n    }\r\n\r\n    getTransmissionControls(): IChannelControls[][] {\r\n        return this._channelController.ChannelControls;\r\n    }\r\n\r\n    track(telemetryItem: ITelemetryItem) {\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        if (this._extensions.length === 0) {\r\n            this._channelController.processTelemetry(telemetryItem); // Pass to Channel controller so data is sent to correct channel queues\r\n        }\r\n        let i = 0;\r\n        while (i < this._extensions.length) {\r\n            if ((this._extensions[i] as any).processTelemetry) {\r\n                (this._extensions[i] as any).processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n    }\r\n}\r\n"]}