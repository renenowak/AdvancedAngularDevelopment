{"version":3,"file":"AppInsightsCore.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/AppInsightsCore.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAMtC,OAAO,EAAE,qBAAqB,EAAE,MAAM,8CAA8C,CAAC;AACrF,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAE3E,YAAY,CAAC;AAEb;IAOI;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IACnC,CAAC;IAED,oCAAU,GAAV,UAAW,MAAsB,EAAE,UAAqB;QACpD,IAAI,CAAC,oBAAoB,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACtD,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACzF,CAAC;IAED,iDAAuB,GAAvB;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC;IACnD,CAAC;IAED,+BAAK,GAAL,UAAM,aAA6B;QAC/B,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;YACxC,cAAc;YACd,MAAM,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC1C,CAAC;QAED,6DAA6D;QAC7D,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;QAE3C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,iDAAuB,GAAvB,UAAwB,QAA+B;QACnD,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,oDAA0B,GAA1B,UAA2B,QAA+B;QACtD,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QACnE,CAAC;IACL,CAAC;IAED;;OAEG;IACH,0CAAgB,GAAhB,UAAiB,SAAkB;QAAnC,iBAsBC;QArBG,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,qBAAqB,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,QAAQ,GAAG,KAAK,CAAC;QACrB,CAAC;QAED,MAAM,CAAC,WAAW,CAAC;YACf,IAAM,KAAK,GAA0B,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YAE1E,KAAK,CAAC,OAAO,CAAC,UAAC,UAA+B;gBAC1C,IAAM,IAAI,GAAmB;oBACzB,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,qBAAqB,GAAG,UAAU,CAAC,SAAS;oBAC1E,IAAI,EAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAkB;oBAC7C,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBAC9B,QAAQ,EAAE,mBAAmB,CAAC,QAAQ;oBACtC,QAAQ,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE;iBAC5C,CAAC;gBAEF,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACrB,CAAC,EAAE,QAAQ,CAAQ,CAAC;IACxB,CAAC;IAEO,gDAAsB,GAA9B,UAA+B,aAA6B;QAExD,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;YACxC,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAEO,6CAAmB,GAA3B,UAA4B,aAA6B;QACrD,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC,aAAa,CAAC,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACnG,CAAC;IACL,CAAC;IACL,sBAAC;AAAD,CAAC,AAlGD,IAkGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { BaseCore } from './BaseCore';\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\n\r\n\"use strict\";\r\n\r\nexport class AppInsightsCore implements IAppInsightsCore {\r\n    public baseCore: BaseCore;\r\n    public config: IConfiguration;\r\n    public logger: IDiagnosticLogger;\r\n\r\n    protected _notificationManager: NotificationManager;\r\n\r\n    constructor() {\r\n        this.baseCore = new BaseCore();\r\n    }\r\n\r\n    initialize(config: IConfiguration, extensions: IPlugin[]): void {\r\n        this._notificationManager = new NotificationManager();\r\n        this.logger = new DiagnosticLogger(config);\r\n        this.config = config;\r\n        \r\n        this.baseCore.initialize(config, extensions, this.logger, this._notificationManager);\r\n    }\r\n\r\n    getTransmissionControls(): IChannelControls[][] {\r\n        return this.baseCore.getTransmissionControls();\r\n    }\r\n\r\n    track(telemetryItem: ITelemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n        \r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelemetryItem(telemetryItem);\r\n\r\n        this.baseCore.track(telemetryItem);\r\n    }\r\n\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    addNotificationListener(listener: INotificationListener): void {\r\n        if (this._notificationManager) {\r\n            this._notificationManager.addNotificationListener(listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    removeNotificationListener(listener: INotificationListener): void {\r\n        if (this._notificationManager) {\r\n            this._notificationManager.removeNotificationListener(listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    pollInternalLogs(eventName?: string): number {\r\n        let interval = this.baseCore.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n\r\n        return setInterval(() => {\r\n            const queue: _InternalLogMessage[] = this.logger ? this.logger.queue : [];\r\n\r\n            queue.forEach((logMessage: _InternalLogMessage) => {\r\n                const item: ITelemetryItem = {\r\n                    name: eventName ? eventName : \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: this.baseCore.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n\r\n                this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval) as any;\r\n    }\r\n\r\n    private _validateTelemetryItem(telemetryItem: ITelemetryItem) {\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n    }\r\n\r\n    private _notifyInvalidEvent(telemetryItem: ITelemetryItem): void {\r\n        if (this._notificationManager) {\r\n            this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n        }\r\n    }\r\n}\r\n"]}